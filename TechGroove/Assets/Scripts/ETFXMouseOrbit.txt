using UnityEngine;
using System.Collections;

namespace EpicToonFX
{

public class ETFXMouseOrbit : MonoBehaviour
{
public Transform target;
public GameObject MagicCircle;
private bool coroutineStarted = false;
public bool stopSpawning = false;
public float spawnDelay = 2.0f; //Set delay between spawns
public float nextSpawnTime; //Tracks the time of next possible spawn
public float distance = 5.0f;
public float xSpeed = 120.0f;
public float ySpeed = 120.0f;
public float yMinLimit = -20f;
public float yMaxLimit = 80f;
public float distanceMin = .5f;
public float distanceMax = 15f;
public float smoothTime = 2f;
float rotationYAxis = 0.0f;
float rotationXAxis = 0.0f;
float velocityX = 0.0f;
float velocityY = 0.0f;

    private GameObject currentMagicCircle; // Keep track of the currently spawned MagicCircle

    // Use this for initialization
    void Start()
    {
        Vector3 angles = transform.eulerAngles;
        rotationYAxis = angles.y;
        rotationXAxis = angles.x;

        // Make the rigid body not change rotation
        if (GetComponent<Rigidbody>())
        {
            GetComponent<Rigidbody>().freezeRotation = true;
        }
    }

    void Update()
    {
        if (!coroutineStarted && Time.time >= 3.0f)
            {
                StartCoroutine(ChangeStopSpawning());
                coroutineStarted = true;
            }

        if (Time.time >= spawnDelay && !stopSpawning)
        {
            //Stop spawning after the first one is created
            stopSpawning = true;
            if (currentMagicCircle == null) // Check if there's no existing MagicCircle
            {
                    Vector3 randomSpawnPosition = new Vector3(Random.Range(-10, 10), 5, Random.Range(-10, 10));
                    currentMagicCircle = Instantiate(MagicCircle, randomSpawnPosition, Quaternion.identity) as GameObject;
                    // Set the next spawn time by adding the delay to the current time
                    nextSpawnTime = Time.time + spawnDelay;
            }
        }
    }

    private IEnumerator ChangeStopSpawning()
        {
            yield return new WaitForSeconds(3.0f); // Wait for 3 seconds

            stopSpawning = false; // Change the stopSpawning variable
        }

    void LateUpdate()
    {
        if (target)
        {
            if (Input.GetMouseButton(1))
            {
                velocityX += xSpeed * Input.GetAxis("Mouse X") * distance * 0.02f;
                velocityY += ySpeed * Input.GetAxis("Mouse Y") * 0.02f;
            }
            rotationYAxis += velocityX;
            rotationXAxis -= velocityY;
            rotationXAxis = ClampAngle(rotationXAxis, yMinLimit, yMaxLimit);
            //Quaternion fromRotation = Quaternion.Euler(transform.rotation.eulerAngles.x, transform.rotation.eulerAngles.y, 0);
            Quaternion toRotation = Quaternion.Euler(rotationXAxis, rotationYAxis, 0);
            Quaternion rotation = toRotation;

            distance = Mathf.Clamp(distance - Input.GetAxis("Mouse ScrollWheel") * 5, distanceMin, distanceMax);
            RaycastHit hit;
            if (Physics.Linecast(target.position, transform.position, out hit))
            {
                distance -= hit.distance;
            }
            Vector3 negDistance = new Vector3(0.0f, 0.0f, -distance);
            Vector3 position = rotation * negDistance + target.position;

            transform.rotation = rotation;
            transform.position = position;
            velocityX = Mathf.Lerp(velocityX, 0, Time.deltaTime * smoothTime);
            velocityY = Mathf.Lerp(velocityY, 0, Time.deltaTime * smoothTime);
        }
    }
    public static float ClampAngle(float angle, float min, float max)
    {
        if (angle < -360F)
            angle += 360F;
        if (angle > 360F)
            angle -= 360F;
        return Mathf.Clamp(angle, min, max);
    }
}
}